name: eBPF Security Tests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - file-monitor
          - network-monitor
          - memory-monitor

jobs:
  ebpf-security-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-suite: 
          - file-monitor
          - network-monitor
          - memory-monitor
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd strace python3 python3-pip jq
          
          # Make test scripts executable
          chmod +x tests/ci/test-orchestrator.sh
          chmod +x tests/ci/lib/common.sh
          chmod +x tests/ci/scenarios/*.sh
          chmod +x tests/ci/validate-events.py

      - name: Build bee-trace container
        run: |
          docker buildx bake --load
          
      - name: Run eBPF Security Tests - ${{ matrix.test-suite }}
        run: |
          export VERBOSE=true
          export TEST_TIMEOUT=180
          ./tests/ci/test-orchestrator.sh ${{ matrix.test-suite }}
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            tests/ci/results/*.json
            tests/ci/results/*.log
          retention-days: 7

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.test-suite }}
          path: tests/ci/results/test-report-*.json
          retention-days: 7

      - name: Display test summary
        if: always()
        run: |
          echo "## Test Summary for ${{ matrix.test-suite }}"
          REPORT_FILE=$(ls tests/ci/results/test-report-*.json 2>/dev/null | head -n1)
          if [ -n "$REPORT_FILE" ] && [ -f "$REPORT_FILE" ]; then
            STATUS=$(jq -r '.status // "unknown"' "$REPORT_FILE")
            TOTAL=$(jq -r '.summary.total_tests // 0' "$REPORT_FILE")
            FAILED=$(jq -r '.summary.failed_tests // 0' "$REPORT_FILE")
            EVENTS=$(jq -r '.metrics.total_events // 0' "$REPORT_FILE")
            
            echo "Status: $STATUS"
            echo "Total tests: $TOTAL"
            echo "Failed tests: $FAILED"
            echo "Total events detected: $EVENTS"
          else
            echo "No test report found"
          fi

      - name: Check test results
        run: |
          # Exit with error if any tests failed
          for report in tests/ci/results/test-report-*.json; do
            if [ -f "$report" ]; then
              STATUS=$(jq -r '.status // "unknown"' "$report")
              if [ "$STATUS" != "passed" ]; then
                echo "Test suite failed: $report"
                exit 1
              fi
            fi
          done

  # Combined test job that runs all suites
  all-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd strace python3 python3-pip jq
          chmod +x tests/ci/test-orchestrator.sh
          chmod +x tests/ci/lib/common.sh
          chmod +x tests/ci/scenarios/*.sh
          chmod +x tests/ci/validate-events.py

      - name: Build bee-trace container
        run: |
          docker buildx bake --load

      - name: Run all eBPF Security Tests
        run: |
          export VERBOSE=true
          export TEST_TIMEOUT=300
          ./tests/ci/test-orchestrator.sh all

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-all
          path: |
            tests/ci/results/*.json
            tests/ci/results/*.log
          retention-days: 7

  # Summary job
  test-summary:
    runs-on: ubuntu-latest
    needs: [ebpf-security-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate combined report
        run: |
          echo "# eBPF Security Test Summary" > summary.md
          echo "" >> summary.md
          echo "## Test Results by Suite" >> summary.md
          echo "" >> summary.md
          
          for suite in file-monitor network-monitor memory-monitor; do
            echo "### ${suite}" >> summary.md
            REPORT_DIR="artifacts/test-report-${suite}"
            if [ -d "$REPORT_DIR" ]; then
              REPORT_FILE=$(find "$REPORT_DIR" -name "*.json" -type f | head -n1)
              if [ -n "$REPORT_FILE" ] && [ -f "$REPORT_FILE" ]; then
                STATUS=$(jq -r '.status // "unknown"' "$REPORT_FILE")
                if [ "$STATUS" = "passed" ]; then
                  echo "Status: ✅ PASSED" >> summary.md
                else
                  echo "Status: ❌ FAILED" >> summary.md
                fi
                
                TOTAL=$(jq -r '.summary.total_tests // 0' "$REPORT_FILE")
                FAILED=$(jq -r '.summary.failed_tests // 0' "$REPORT_FILE")
                EVENTS=$(jq -r '.metrics.total_events // 0' "$REPORT_FILE")
                
                echo "- Total tests: $TOTAL" >> summary.md
                echo "- Failed tests: $FAILED" >> summary.md
                echo "- Events detected: $EVENTS" >> summary.md
              else
                echo "No report found" >> summary.md
              fi
            else
              echo "No results available" >> summary.md
            fi
            echo "" >> summary.md
          done
          
          cat summary.md

      - name: Post summary as PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });