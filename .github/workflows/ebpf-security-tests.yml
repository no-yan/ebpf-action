name: eBPF Security Tests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - file-monitor
          - network-monitor
          - memory-monitor

jobs:
  ebpf-security-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-suite: 
          - file-monitor
          - network-monitor
          - memory-monitor
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd strace python3 python3-pip
          
          # Make test scripts executable
          chmod +x tests/ci/test-orchestrator.sh
          chmod +x tests/ci/lib/common.sh
          chmod +x tests/ci/scenarios/*.sh
          chmod +x tests/ci/validate-events.py

      - name: Build bee-trace container
        run: |
          docker buildx bake --load
          
      - name: Run eBPF Security Tests - ${{ matrix.test-suite }}
        run: |
          export VERBOSE=true
          export TEST_TIMEOUT=180
          ./tests/ci/test-orchestrator.sh ${{ matrix.test-suite }}
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            tests/ci/results/*.json
            tests/ci/results/*.log
          retention-days: 7

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.test-suite }}
          path: tests/ci/results/test-report-*.json
          retention-days: 7

      - name: Display test summary
        if: always()
        run: |
          echo "## Test Summary for ${{ matrix.test-suite }}"
          if [ -f tests/ci/results/test-report-*.json ]; then
            cat tests/ci/results/test-report-*.json | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f\"Status: {data.get('status', 'unknown')}\")
summary = data.get('summary', {})
print(f\"Total tests: {summary.get('total_tests', 0)}\")
print(f\"Failed tests: {summary.get('failed_tests', 0)}\")
print(f\"Total events detected: {data.get('metrics', {}).get('total_events', 0)}\")
            "
          else
            echo "No test report found"
          fi

      - name: Check test results
        run: |
          # Exit with error if any tests failed
          if [ -f tests/ci/results/test-report-*.json ]; then
            python3 -c "
import json, sys, glob
for report in glob.glob('tests/ci/results/test-report-*.json'):
    with open(report) as f:
        data = json.load(f)
        if data.get('status') != 'passed':
            print(f\"Test suite failed: {report}\")
            sys.exit(1)
            "
          fi

  # Combined test job that runs all suites
  all-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd strace python3 python3-pip
          chmod +x tests/ci/test-orchestrator.sh
          chmod +x tests/ci/lib/common.sh
          chmod +x tests/ci/scenarios/*.sh
          chmod +x tests/ci/validate-events.py

      - name: Build bee-trace container
        run: |
          docker buildx bake --load

      - name: Run all eBPF Security Tests
        run: |
          export VERBOSE=true
          export TEST_TIMEOUT=300
          ./tests/ci/test-orchestrator.sh all

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-all
          path: |
            tests/ci/results/*.json
            tests/ci/results/*.log
          retention-days: 7

  # Summary job
  test-summary:
    runs-on: ubuntu-latest
    needs: [ebpf-security-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate combined report
        run: |
          echo "# eBPF Security Test Summary" > summary.md
          echo "" >> summary.md
          echo "## Test Results by Suite" >> summary.md
          echo "" >> summary.md
          
          for suite in file-monitor network-monitor memory-monitor; do
            echo "### ${suite}" >> summary.md
            if [ -d "artifacts/test-report-${suite}" ]; then
              python3 -c "
import json, glob
reports = glob.glob(f'artifacts/test-report-${suite}/*.json')
if reports:
    with open(reports[0]) as f:
        data = json.load(f)
        status = '✅ PASSED' if data.get('status') == 'passed' else '❌ FAILED'
        print(f\"Status: {status}\")
        summary = data.get('summary', {})
        print(f\"- Total tests: {summary.get('total_tests', 0)}\")
        print(f\"- Failed tests: {summary.get('failed_tests', 0)}\")
        print(f\"- Events detected: {data.get('metrics', {}).get('total_events', 0)}\")
else:
    print('No report found')
              " >> summary.md
            else
              echo "No results available" >> summary.md
            fi
            echo "" >> summary.md
          done
          
          cat summary.md

      - name: Post summary as PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });